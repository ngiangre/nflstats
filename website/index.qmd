---
engine: knitr
---

```{r,echo=FALSE,message=FALSE,warning=FALSE}
dict <- 
    tibble::tribble(
    ~field,~data_type,~description,~header,
    "season_type", "character","Either REG or POST","STYPE",
    "player_display_name", "character","Full name of the player","NAME",
    "player_position", "character","Position of the player accordinng to NGS","POS",
    "team_abbr", "character","Official team abbreveation","TEAM",
    "player_gsis_id", "character","Unique identifier of the player","ID",
    "player_first_name", "character","Player's first name","FIRST",
    "player_last_name", "character","Player's last name","LAST",
    "player_short_name", "character","Short version of player's name","SHORTNAME",
    "season","numeric","The year of the NFL season. This reperesents the whole season, so regular season games that happen in January as well as playoff games will occur in the year after this number","YEAR",
    "week","numeric","The week of the NFL season the game occurs in. Please note that the `game_type` will differ for weeks = 18 because of the season expansion in 2021. Please use `game_type` to filter for regular season or postseason","WEEK",
    "avg_time_to_throw","numeric","Average time elapsed from the time of snap to throw on every pass attempt for a passer (sacks excluded).","AVG TTT",
    "avg_completed_air_yards","numeric","Average air yards on completed passes","AVG CAY",
    "avg_intended_air_yards","numeric","Average air yards on all attempted passes","AVG IAY",
    "avg_air_yards_differential","numeric","Air Yards Differential is calculated by subtracting the passer's average Intended Air Yards from his average Completed Air Yards. This stat indicates if he is on average attempting deep passes than he on average completes.","AVG AYD",
    "aggressiveness","numeric","Aggressiveness tracks the amount of passing attempts a quarterback makes that are into tight coverage, where there is a defender within 1 yard or less of the receiver at the time of completion or incompletion. AGG is shown as a % of attempts into tight windows over all passing attempts.","AGGR",
    "max_completed_air_distance","numeric","Air Distance is the amount of yards the ball has traveled on a pass, from the point of release to the point of reception (as the crow flies). Unlike Air Yards, Air Distance measures the actual distance the passer throws the ball.","MAX CAY",
    "avg_air_yards_to_sticks","numeric","Air Yards to the Sticks shows the amount of Air Yards ahead or behind the first down marker on all attempts for a passer. The metric indicates if the passer is attempting his passes past the 1st down marker, or if he is relying on his skill position players to make yards after catch.","AVG AYS",
    "attempts","numeric","The number of pass attempts","ATT",
    "pass_yards","numeric","Number of yards gained on pass plays","YD",
    "pass_touchdowns","numeric", "Number of touchdowns scored on pass plays","TD",
    "interceptions","numeric","Number of interceptions thrown","INT",
    "passer_rating","numeric",  "Overall NFL passer rating","RATING",
    "completions","numeric", "Number of completed passes","COMP",
    "completion_percentage","numeric","Percentage of completed passes","COMP%",
    "expected_completion_percentage","numeric",  "Using a passer's Completion Probability on every play, determine what a passer's completion percentage is expected to be.","EXP COMP%",
    "completion_percentage_above_expectation","numeric", "A passer's actual completion percentage compared to their Expected Completion Percentage.","CPOE",
    "avg_air_distance","numeric","A receiver's average depth of target","AVG DEPTH",
    "max_air_distance","numeric","A receiver's maximum depth of target","MAX DEPTH",
    "player_jersey_number","numeric",  "Player's jersey number","JERSEY",
    "avg_cushion","numeric","The distance (in yards) measured between a WR/TE and the defender they're lined up against at the time of snap on all targets.","AVG CUSH",
    "avg_separation","numeric","The distance (in yards) measured between a WR/TE and the nearest defender at the time of catch or incompletion.","AVG SEP",
    "percent_share_of_intended_air_yards","numeric", "The sum of the receivers total intended air yards (all attempts) over the sum of his team's total intended air yards. Represented as a percentage, this statistic represents how much of a team's deep yards does the player account for.","IAY SHARE",
    "receptions","numeric", "The number of receptions for the receiver","REC",
    "targets","numeric","The numnber of targets for the receiver","TARGETS",
    "catch_percentage","numeric", "Percentage of caught passes relative to targets","CATCH%",
    "yards","numeric", "The number of receiving yards","YD",
    "rec_touchdowns","numeric",  "The number of touchdown receptions","TD",
    "avg_yac","numeric", "Average yards gained after catch by a receiver.","AVG YAC",
    "avg_expected_yac","numeric","Average expected yards after catch, based on numerous factors using tracking data such as how open the receiver is, how fast they're traveling, how many defenders/blockers are in space, etc","EXP YAC",
    "avg_yac_above_expectation","numeric","A receiver's YAC compared to their Expected YAC.","YACOE",
    "efficiency","numeric",  "Rushing efficiency is calculated by taking the total distance a player traveled on rushing plays as a ball carrier according to Next Gen Stats (measured in yards) per rushing yards gained. The lower the number, the more of a North/South runner.","EFF",
    "percent_attempts_gte_eight_defenders","numeric","On every play, Next Gen Stats calculates how many defenders are stacked in the box at snap. Using that logic, DIB% calculates how often does a rusher see 8 or more defenders in the box against them.","DIB%",
    "avg_time_to_los","numeric","Next Gen Stats measures the amount of time a ball carrier spends (measured to the 10th of a second) before crossing the Line of Scrimmage. TLOS is the average time behind the LOS on all rushing plays where the player is the rusher.","TLOS",
    "rush_attempts","numeric","The number of rushing attempts","ATT",
    "rush_yards","numeric",  "The number of rushing yards gained","YD",
    "expected_rush_yards","numeric", "Expected rushing yards based on Nextgenstats' Big Data Bowl model","EYD",
    "rush_yards_over_expected","numeric",  "A rusher's rush yards gained compared to the expected rush yards","YDOE",
    "avg_rush_yards","numeric",  "AVerage rush yards gained","AVG YD",
    "rush_yards_over_expected_per_att","numeric","Average rush yards above expectation","YDOE/ATT",
    "rush_pct_over_expected","numeric","Rushing percentage above expectation","R%OE",
    "rush_touchdowns","numeric","The number of scored rushing touchdowns","TD",
)

```

```{r,echo=FALSE,message=FALSE,warning=FALSE}
with_tooltip <- function(value, tooltip) {
  htmltools::tags$abbr(
      style = "text-decoration: underline; text-decoration-style: dotted; cursor: help;",
      title = tooltip, 
      value)
}

generate_table <- function(year = 0,stat_type = c('passing','rushing','receiving')){
    stat_type <- match.arg(stat_type)
    stopifnot(year>=0 & year<=8)
    
    result <- 
        nflreadr::load_nextgen_stats(
            seasons = nflreadr::get_current_season()-year,
            stat_type = stat_type
        ) |> 
            dplyr::filter(week==0) |> 
            dplyr::select(-week) |> 
            dplyr::mutate(dplyr::across(
                dplyr::where(is.numeric),~{round(.x,2)}
            )) |> 
        dplyr::left_join(
            nflreadr::load_players() |> 
                dplyr::select(-team_abbr),
            by = c("player_gsis_id" = "gsis_id")
        ) |> 
        dplyr::left_join(
            nflreadr::load_teams() |> 
                dplyr::select(dplyr::all_of(c(
                    'team_abbr','team_name',
                    'team_logo_espn','team_division'
                ))),
            by = 'team_abbr'
        )
    
    cols <- 
        union(
            intersect(colnames(result),dict$field),
            c('team_division','team_name')
        )
    cols <- setdiff(cols,c('team_abbr','season','season_type',
                           'player_gsis_id','player_first_name','player_last_name',
                           'player_jersey_number','player_short_name'))
    names(cols) <- cols
    
    reactable_table <- 
        result |> 
            dplyr::filter(.data[['season_type']]=="REG") |> 
            dplyr::relocate(headshot) |> 
            dplyr::select(dplyr::any_of(c(
                'headshot','player_display_name',cols
            ))) |> 
            dplyr::relocate(player_position,.after = dplyr::last_col())
    
    sort_col_lst <- 
        list(
        'passing' = "passer_rating",
        'rushing' = "rush_yards_over_expected_per_att",
        'receiving' = "avg_separation"
    )
    
    reactable::reactable(
        reactable_table,
        defaultSorted = sort_col_lst[[stat_type]],
        defaultSortOrder = 'desc',
        pagination = TRUE,
        searchable = TRUE,
        resizable = FALSE,
        columns = c(
            list(
                headshot = reactable::colDef(
                    cell = reactablefmtr::embed_img(result$headshot,
                                                    width = 110,
                                                    height = 80,
                                                    horizontal_align = "center"),
                    
                    sticky = 'left',
                    name = '',
                    minWidth = 120,
                    style = reactablefmtr::background_img(
                        data = result,
                        width = '90%',
                        height = '90%',
                        img_ref = 'team_logo_espn'
                    )
                )
            ),
            purrr::map(
                cols,
                ~{
                    if(.x=='player_display_name'){
                        name_ <- 'player'
                        reactable::colDef(
                            minWidth = nchar(name_)*13*2,
                            cell = function(value,index){
                                pos <- reactable_table$player_position[index]
                                name <- reactable_table$player_display_name[index]
                                team <- reactable_table$team_name[index]
                                team_division <- reactable_table$team_division[index]
                                htmltools::div(
                                  htmltools::div(style = "font-weight: 600", name),
                                  htmltools::div(style = "font-size: 0.80rem",pos),
                                  htmltools::div(style = "font-size: 0.80rem",team),
                                  htmltools::div(style = "font-size: 0.80rem",team_division)
                                )
                            },
                            name = '',
                            sticky = 'left',
                        )
                    }else{
                        header_ <- dict$header[dict$field==.x]
                        if(length(header_)==0)header_ <- toupper(.x)
                        reactable::colDef(
                            name = header_,
                            minWidth = nchar(header_)*20,
                            header = with_tooltip(
                                value = header_,
                                tooltip = dict$description[
                                    dict$field==.x
                                ]
                            )
                        )
                    }
                }
            )
        )
    )
}

```

::: {.column-screen}

::: panel-tabset

# Current Season

::: panel-tabset

## Quarterbacks

```{r,echo=FALSE,message=FALSE,warning=FALSE}
generate_table(stat_type = 'passing')
```

## Rushers

```{r,echo=FALSE,message=FALSE,warning=FALSE}
generate_table(stat_type = 'rushing')
```

## Receivers

```{r,echo=FALSE,message=FALSE,warning=FALSE}
generate_table(stat_type = 'receiving')
```

:::

# Last Season

::: panel-tabset

## Quarterbacks

```{r,echo=FALSE,message=FALSE,warning=FALSE}
generate_table(year = 1,stat_type = 'passing')
```

## Rushers

```{r,echo=FALSE,message=FALSE,warning=FALSE}
generate_table(year = 1,stat_type = 'rushing')
```

## Receivers

```{r,echo=FALSE,message=FALSE,warning=FALSE}
generate_table(year = 1,stat_type = 'receiving')
```

:::

:::

Generated from Next Gen Stats using the {nflreadr} R package

Last updated: `r lubridate::with_tz(Sys.time(), "America/New_York")` ET

:::